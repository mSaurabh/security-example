const fs = require("fs");
const path = require("path");
const https = require("https");
const express = require("express");
const helmet = require("helmet");
const passport = require("passport");
const cookieSession = require("cookie-session");
const { Strategy } = require("passport-google-oauth20");
require("dotenv").config();

const PORT = 3000;

const config = {
  CLIENT_ID: process.env.CLIENT_ID,
  CLIENT_SECRET: process.env.CLIENT_SECRET,
  COOKIE_KEY_1: process.env.COOKIE_KEY_1,
  COOKIE_KEY_2: process.env.COOKIE_KEY_2
};

const AUTH_OPTIONS = {
  /**@description The callbackURL once we have verified user the location where google needs to send the token */
  callbackURL: "/auth/google/callback",
  clientID: config.CLIENT_ID,
  clientSecret: config.CLIENT_SECRET
};

//NOTE in Millis it comes to 1 day
const COOKIE_MAX_AGE_MILLIS = 24 * 60 * 60 * 1000;

/**
 * @description This method gets called when the user is verified
 * @author Saurabh_M
 * @date 2022.08.05
 * @param {*} accessToken user password
 * @param {*} refreshToken extension on time so the user doesn't need to re-login
 * @param {*} profile user profile
 * @param {function} done function to indicate to passport takeover from here.
 */
function verifyCallback(accessToken, refreshToken, profile, done) {
  //accessToken --> users password
  console.log("Google profile", profile);
  //done(error,if no error then valid value to pass to passport)
  done(null, profile);
}

passport.use(new Strategy(AUTH_OPTIONS, verifyCallback));

//NOTE Save the session to the cookie
passport.serializeUser((user, done) => {
  done(null, user.id);
});

//NOTE Read the session from the cookie
passport.deserializeUser((id, done) => {
  done(null, id);
});

const app = express();

//NOTE For security related middleware we use the middleware right at top
app.use(helmet());

app.use(
  cookieSession({
    name: "session",
    maxAge: COOKIE_MAX_AGE_MILLIS,
    /**
     * NOTE this is the list of secret values that is used to keep the cookie secure.
     * This is what our server will use to verify the data coming in.
     * Usually somethign generated by password manager and not a part of the code base.
     * It is an array since if our keys get leaked and we change it, we don't want our currently logged in user to be impacted.
     * So it is always good to have 2 set of secret keys.
     * */
    keys: [config.COOKIE_KEY_1, config.COOKIE_KEY_2]
  })
);

//passport initialization right after the helmet is setup and we setup the session as we want passport to use that
app.use(passport.initialize());
app.use(passport.session());

/**
 * @description This function is passed to the secret middleware and it helps to check if the user
 *              is logged in currently and only then will have access to secret endpoint
 * @author Saurabh_M
 * @date 2022.08.07
 * @param {*} req
 * @param {*} res
 * @param {function} next
 * @return {*}
 */
function checkLoggedIn(req, res, next) {
  console.log(
    "user is ",
    req.user,
    " isAuthenticated ? ",
    req.isAuthenticated()
  );
  const isLoggedIn = req.isAuthenticated() && req.user;
  if (!isLoggedIn) {
    return res.status(401).json({ error: "You must log in!" });
  }
  //NOTE We pass on the control to the next in sequence of our middleware / endpoint
  next();
}

//NOTE The OAuth Client ID we created in Google CLoud console.
app.get(
  "/auth/google",
  passport.authenticate("google", { scope: ["email"] }),
  (req, res) => {
    console.log("Kicking off google auth");
  }
);

app.get(
  "/auth/google/callback",
  passport.authenticate("google", {
    failureRedirect: "/failure",
    successRedirect: "/",
    //NOTE this is true by default so we can remove it, but for sake of the project we are keeping it.
    session: true
  }),
  (req, res) => {
    console.log("Google called us back!");
  }
);

app.get("/auth/logout", (req, res) => {
  //NOTE using the passport populated logout method in req
  // Removes req.user and clears any logged in session
  req.logout();
  //NOTE Take the user back to general home page so they can explore as anonymous user or login as another user
  return res.redirect("/");
});

app.get("/failure", (req, res) => {
  //TODO
  return res.send("Failed to log in!");
});

app.get("/secret", checkLoggedIn, (req, res) => {
  return res.send("Your personal secret value is 86!!");
});

app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

https
  .createServer(
    {
      key: fs.readFileSync("key.pem"),
      cert: fs.readFileSync("cert.pem")
    },
    app
  )
  .listen(PORT, () => {
    console.log(`Listening on port ${PORT}...`);
  });
